# Licensed under the MIT License. See LICENSE file in the project root for details.

name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v2.1.6
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goarch: amd64
            goamd64: '1'
          - goarch: amd64
            goamd64: '3'
          - goarch: amd64
            goamd64: '4'
          - goarch: arm64
            goamd64: '1'
            exec: /usr/bin/qemu-aarch64-static
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install QEMU
        if: matrix.goarch == 'arm64'
        run: sudo apt-get update && sudo apt-get install -y qemu-user-static

      - name: Run vet and tests
        shell: bash
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          TEST_EXEC: ${{ matrix.exec }}
        run: |
          set -euo pipefail
          go vet ./...
          go test ${TEST_EXEC:+-exec=${TEST_EXEC}} -race -p=1 ./...

      - name: Run tests with coverage
        if: matrix.goarch == 'amd64' && matrix.goamd64 == '4'
        shell: bash
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          TEST_EXEC: ${{ matrix.exec }}
        run: |
          set -euo pipefail
          go test ${TEST_EXEC:+-exec=${TEST_EXEC}} -race -coverprofile=coverage.out -covermode=atomic -p=1 ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        if: matrix.goarch == 'amd64' && matrix.goamd64 == '4'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # benchmark:
  #   name: Benchmark
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.24.6'
  #         cache: true

  #     - name: Install dependencies
  #       run: go mod download

  #     - name: Run benchmarks
  #       run: go test -race -bench=. -benchmem -p=1 ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scanner
        run: gosec -fmt sarif -out results.sarif ./...

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goarch: amd64
            goamd64: '1'
          - goarch: amd64
            goamd64: '3'
          - goarch: amd64
            goamd64: '4'
          - goarch: arm64
            goamd64: '1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build binaries
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
        run: |
          set -euo pipefail
          make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goarch }}${{ matrix.goamd64 }}
          path: bin/

  fuzz:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run fuzz tests
        run: |
          for fuzz_test in FuzzBasicOperations FuzzConcurrentOperations FuzzTransactionOperations FuzzSnapshotOperations FuzzEdgeCases FuzzLargeData FuzzStressTest; do
            echo "Running fuzz test: $fuzz_test"
            go test -fuzz=$fuzz_test -fuzztime=30s ./tests/fuzz_test.go
          done

  property:
    name: Property-Based Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run property-based tests
        run: go test -v -run TestPropertyBased ./...

  linearizability:
    name: Linearizability Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run linearizability tests
        run: go test -v -run TestLinearizability ./...

  race-detection:
    name: Race Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run race detection tests
        run: go test -race -v -run TestRaceDetection ./...

  gc:
    name: Garbage Collection Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run GC tests
        run: go test -v -run TestGC ./...

